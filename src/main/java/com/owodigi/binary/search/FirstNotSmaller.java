package com.owodigi.binary.search;

import java.util.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * TITLE: First Element Not Smaller Than Target
 * LEVEL: Easy ðŸŸ©
 * PROBLEM STATEMENT: Given an array of integers sorted in increasing order and a target, find the index of the first element in
 * the array that is larger than or equal to the target. Assume that it is guaranteed to find a satisfying number.
 * SAMPLE DATA:
 * Input:
 *
 * arr = [1, 3, 3, 5, 8, 8, 10]
 * target = 2
 * Output: 1
 *
 * Explanation: The first element larger than 2 is 3, which has index 1.
 *
 * Input:
 *
 * arr = [2, 3, 5, 7, 11, 13, 17, 19]
 * target = 6
 * Output: 3
 *
 * Explanation: The first element larger than 6 is 7, which has index 3.
 * -------------------
 * PATTERN: Binary Search
 * STATUS: SOLVED âœ…
 * RUNTIME COMPLEXITY: TBD
 * SPACE COMPLEXITY: TBD
 */
public class FirstNotSmaller {

    public static int firstNotSmaller(List<Integer> arr, int target) {
        int left = 0, right = arr.size() - 1, index = -1;
        while (left <= right) {
            final int mid = (left + right) / 2;
            final int candidate = arr.get(mid);
            if (candidate >= target) {
                index = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return index;
    }

    @Test
    public void testCase1() {
        final List<Integer> input = List.of(1, 3, 3, 5, 8, 8, 10);
        final int target = 2;
        final int expected = 1;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }

    @Test
    public void testCase2() {
        final List<Integer> input = List.of(0);
        final int target = 0;
        final int expected = 0;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }

    @Test
    public void testCase3() {
        final List<Integer> input = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        final int target = 10;
        final int expected = 9;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }

    @Test
    public void testCase4() {
        final List<Integer> input = List.of(1, 2, 2, 2, 2, 2, 2, 3, 5, 8, 8, 10);
        final int target = 2;
        final int expected = 1;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }

    @Test
    public void testCase5() {
        final List<Integer> input = List.of(
        86, 124, 232, 371, 422, 443, 696, 1189, 1306, 1517, 1718, 1730, 1908, 2119, 2368, 2449, 2578, 2827, 2997, 3116,
                3349, 3488, 3620, 3801, 3861, 4171, 4288, 4498, 4673, 4711, 4726, 4774, 4801, 4818, 5239, 5486, 5709, 6124, 6363,
                6364, 6408, 6796, 7033, 7096, 7301, 7307, 7471, 7544, 7703, 8246, 8271, 8281, 8537, 8653, 8657, 8811, 8967, 9005,
                9428, 9434, 9437, 10249, 10333, 10611, 10980, 11166, 11173, 11683, 11905, 11950, 11951, 11984, 12068, 12428, 13365,
                13976, 14099, 14103, 14145, 14162, 14183, 14526, 14569, 14753, 14838, 15083, 15214, 15489, 15512, 15600, 15975, 16037,
                16171, 16356, 16519, 16606, 16929, 17114, 17194, 17333, 17364, 17403, 17430, 17501, 17534, 17607, 17645, 17883, 18118,
                18188, 18319, 18441, 18507, 18593, 18626, 18701, 18781, 19087, 19097, 19202, 19424, 19512, 19561, 19625, 19765, 19806,
                20123, 20285, 20548, 20558, 20844, 20919, 20974, 21126, 21171, 21685, 21724, 21739, 21752, 21780, 21821, 22127, 22189,
                22521, 22606, 23084, 23262, 23415, 23503, 23513, 23608, 23662, 23690, 23713, 23795, 23811, 23865, 23997, 24218, 24285,
                25058, 25344, 25637, 25751, 25758, 25805, 26037, 26068, 26103, 26786, 26840, 27139, 27326, 27453, 27721, 27936, 28243,
                28407, 28709, 28735, 28913, 29240, 29654, 29666, 30149, 30725, 30884, 31108, 31175, 31271, 31912, 32178, 32199, 32255,
                32318, 32643, 32680, 32795, 32858, 32885, 32908, 33085, 33317, 33481, 33578, 34055, 34504, 34578, 34715, 35023, 35086,
                35481, 35692, 35872, 35885, 35897, 35918, 36133, 36507, 36632, 36683, 36811, 37007, 37074, 37151, 37451, 37533, 37538,
                37857, 37919, 38041, 38144, 38206, 38337, 38417, 38428, 38429, 38515, 38630, 38641, 38703, 38779, 38856, 38905, 39162,
                39412, 39426, 39499, 39502, 39671, 39800, 40068, 40116, 40130, 40303, 40541, 40626, 40756, 40953, 41110, 41231, 41391,
                41523, 41595, 41641, 41831, 42373, 42656, 42717, 42734, 43350, 43496, 43653, 43802, 43822, 44056, 44288, 44365, 44482,
                44559, 44574, 44661, 44774, 45066, 45138, 45296, 45597, 45844, 45881, 45943, 46019, 46021, 46087, 46321, 46503, 46576,
                46622, 46736, 46877, 46993, 47322, 47341, 47359, 47451, 47530, 47635, 47746, 47996, 48142, 48423, 48655, 48731, 48889,
                49005, 49022, 49046, 49263, 49330, 49414, 49702, 49778, 49846, 49906, 50050, 50167, 50229, 50317, 50412, 50524, 50974,
                51044, 51098, 51362, 51431, 52236, 52925, 52991, 53118, 53133, 53200, 53497, 53538, 53640, 53745, 54240, 54255, 54382,
                54459, 54459, 54608, 54896, 54932, 55134, 55154, 55280, 55779, 56063, 56256, 56273, 56273, 56317, 56579, 56581, 56730,
                56751, 56958, 57405, 57811, 58126, 58305, 58954, 59352, 59395, 59419, 59441, 59446, 59718, 59724, 60582, 60638, 60666,
                60678, 60861, 60959, 60991, 61030, 61272, 61481, 61614, 61811, 61924, 61936, 62164, 62167, 62210, 62353, 62512, 62525,
                62552, 62706, 62789, 62858, 62953, 62975, 63012, 63074, 63160, 63263, 63411, 63659, 63791, 63983, 64152, 64170, 64240,
                64414, 64455, 64469, 64522, 64672, 64692, 65051, 65232, 65447, 65581, 65906, 66301, 66383, 67173, 67193, 67224, 67525,
                67692, 67763, 67913, 67924, 68445, 68773, 69381, 69450, 69473, 69560, 69697, 69804, 69926, 69930, 70509, 70567, 70677,
                70703, 70963, 71054, 71271, 71453, 71463, 71511, 71695, 71728, 71840, 71869, 71967, 71971, 72074, 72080, 72309, 72510,
                72512, 72730, 72811, 73310, 73441, 73906, 73914, 73930, 73963, 74162, 74533, 74855, 75133, 75227, 75399, 75450, 75827,
                76108, 76132, 76139, 76298, 76788, 76826, 76866, 77002, 77301, 77354, 77437, 77850, 77851, 77853, 77973, 78094, 78110,
                78116, 78671, 78728, 79050, 79148, 79696, 79771, 80034, 80062, 80189, 80421, 80422, 80551, 80631, 80842, 80930, 80992,
                81317, 81379, 81485, 81579, 81751, 81752, 81754, 81798, 82015, 82156, 82177, 82504, 82627, 82688, 82751, 82868, 83475,
                83666, 84187, 84418, 84525, 84638, 84860, 84986, 85047, 85062, 85156, 85212, 85323, 85463, 85853, 86003, 86515, 86535,
                86724, 86838, 86979, 87034, 87171, 87235, 87549, 87596, 87930, 88033, 88295, 88844, 88858, 88859, 89274, 89359, 89434,
                89846, 89880, 89909, 89910, 90101, 90221, 90287, 90289, 90310, 90331, 90498, 90523, 90555, 90626, 91042, 91045, 91125,
                91281, 91396, 91913, 92092, 92336, 92362, 92507, 92756, 92767, 92802, 92822, 92838, 93381, 93493, 93845, 94111, 94170,
                94320, 94330, 94388, 94426, 94520, 94562, 94712, 95028, 95617, 95728, 95837, 95849, 95900, 96027, 96567, 96708, 96979,
                97066, 97127, 97227, 97299, 97448, 97650, 97717, 98094, 98252, 98277, 98379, 99055, 99378, 99483, 99567, 99666, 99867,
                91945);
        final int target = 91945;
        final int expected = 588;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }

    @Test
    public void testCase6() {
        final List<Integer> input = List.of(
                59, 157, 200, 338, 339, 358, 430, 624, 702, 811, 1268, 1288, 1397, 1479, 1606, 1606, 1632, 1641, 1718, 1825,
                1942, 1973, 2235, 2430, 2534, 2658, 2866, 2869, 3671, 3725, 3915, 3946, 3982, 3984, 3994, 4043, 4182, 4189, 4218,
                4287, 4291, 4307, 4439, 4644, 4826, 4938, 5226, 5401, 5932, 5987, 5995, 6555, 6598, 6669, 6783, 6824, 7054, 7136,
                7392, 7484, 7527, 7630, 7708, 7763, 7848, 7964, 7998, 8004, 8010, 8032, 8162, 8296, 8345, 8745, 8924, 8949, 9043,
                9224, 9695, 9735, 9854, 9937, 10023, 10131, 10170, 10208, 10241, 10560, 10817, 10950, 10968, 11225, 11263, 11337,
                11359, 11471, 11489, 11548, 11672, 11694, 11755, 11810, 11873, 12152, 12207, 12278, 12291, 12348, 12383, 12580,
                12756, 12786, 13126, 13127, 13288, 13360, 13615, 13726, 13819, 14067, 14213, 14340, 14485, 14653, 14698, 14709,
                14889, 14946, 15019, 15052, 15312, 15351, 15674, 15717, 15736, 15868, 16105, 16186, 16368, 16449, 16495, 16496,
                16506, 16624, 16647, 16713, 16783, 17235, 17351, 17410, 17607, 17735, 17785, 17860, 17916, 17927, 17966, 18101,
                18271, 18607, 18636, 18910, 18954, 19000, 19081, 19307, 19338, 19583, 19700, 19773, 19792, 19921, 20101, 20186,
                20230, 20235, 20331, 20661, 20733, 20742, 21032, 21110, 21292, 21368, 21388, 21512, 22100, 22169, 22274, 22317,
                22488, 22561, 22713, 22955, 23080, 23143, 23153, 23304, 23834, 23930, 24022, 24078, 24121, 24239, 24267, 24294,
                24337, 24583, 24660, 24739, 24745, 24988, 25184, 25235, 25248, 25294, 25391, 25458, 25719, 25731, 25842, 25966,
                26025, 26099, 26328, 26495, 26711, 27417, 27505, 27510, 28043, 28231, 28327, 28526, 28688, 28789, 28936, 29045,
                29194, 29239, 29268, 29463, 29566, 29566, 29655, 30175, 30344, 30401, 30417, 30630, 31254, 31501, 31513, 31845,
                31897, 32011, 32098, 32153, 32712, 32724, 32831, 32917, 33006, 33074, 33182, 33392, 33394, 33415, 33461, 33513,
                33595, 33693, 34284, 34291, 34494, 34542, 34554, 34563, 34758, 34772, 34802, 34817, 34839, 34841, 34855, 35112,
                35119, 35291, 35291, 35409, 35638, 35736, 35743, 35783, 35812, 35822, 35908, 35928, 35999, 36147, 36229, 36389,
                36414, 36446, 36674, 36923, 37084, 37458, 37495, 37621, 37899, 38114, 38166, 38241, 38469, 38573, 38619, 39197,
                39414, 39658, 39775, 39865, 39888, 39966, 40065, 40124, 40531, 40652, 40931, 41484, 41693, 41715, 41723, 41859,
                41862, 41957, 42045, 42387, 42632, 43082, 43180, 43369, 43381, 43549, 43635, 43985, 44033, 44065, 44090, 44271,
                44348, 44643, 45020, 45089, 45324, 45338, 45849, 45927, 46011, 46090, 46830, 46842, 47074, 47204, 47233, 47235,
                47323, 47329, 47366, 47444, 47449, 47454, 47466, 47563, 47637, 47744, 48034, 48121, 48184, 48546, 48560, 48615,
                48616, 48619, 48626, 48641, 48687, 48788, 48909, 48910, 48956, 49051, 49103, 49288, 49467, 49476, 49782, 49809,
                49860, 49895, 49949, 50319, 50340, 50373, 50423, 50683, 50896, 50901, 50902, 51008, 51072, 51528, 52102, 52135,
                52203, 52325, 52383, 52887, 53008, 53325, 53431, 53616, 53732, 53814, 53980, 54264, 54289, 54734, 54936, 54947,
                55278, 55327, 55428, 55666, 55748, 55848, 55891, 56242, 56320, 56352, 56433, 56452, 56758, 57098, 57398, 57401,
                57488, 57552, 57603, 57787, 57795, 57835, 58113, 58226, 58354, 58427, 58472, 58568, 58599, 58614, 58775, 58898,
                59160, 59183, 59242, 59369, 59711, 59735, 60000, 60041, 60648, 60768, 60824, 61244, 61459, 61474, 61637, 61662,
                61725, 61741, 61892, 62010, 62088, 62221, 62347, 62577, 62587, 62636, 62681, 62723, 62793, 62804, 62870, 62928,
                62971, 63235, 63405, 63561, 63574, 63622, 63728, 63793, 63919, 63962, 63970, 64062, 64073, 64447, 64490, 64819,
                64920, 64955, 65096, 65200, 65495, 65556, 65601, 65851, 65894, 66019, 66024, 66072, 66209, 66388, 66495, 66548,
                67314, 67456, 67550, 67723, 67747, 67818, 67838, 68131, 68192, 68194, 68300, 68438, 68794, 68794, 68847, 68868,
                68982, 69069, 69080, 69098, 69123, 69571, 69572, 69692, 69941, 70189, 70201, 70357, 70509, 70556, 70680, 70815,
                70973, 71020, 71037, 71140, 71212, 71293, 71408, 71444, 71535, 71694, 71712, 72228, 72263, 72276, 72563, 72842,
                72997, 73104, 73215, 73219, 73381, 73533, 73848, 73864, 73932, 74095, 74506, 74568, 74680, 74788, 74960, 75020,
                75157, 75211, 75482, 75505, 75635, 75932, 76617, 76661, 76871, 77117, 77145, 77196, 77221, 77255, 77299, 77428,
                77552, 77622, 77685, 77753, 77833, 77847, 77919, 78035, 78069, 78294, 78872, 78968, 79040, 79051, 79060, 79255,
                79505, 79719, 79817, 79948, 79960, 80138, 80239, 80403, 80494, 80767, 80821, 81018, 81083, 81129, 81191, 81299,
                81308, 81531, 81564, 81571, 81592, 81760, 81767, 81980, 81997, 82049, 82165, 82314, 82428, 82470, 82685, 82729,
                83031, 83161, 83220, 83551, 83644, 83698, 83789, 83807, 83941, 84029, 84159, 84234, 84409, 84439, 84485, 84504,
                84560, 84593, 84616, 84685, 84932, 85123, 85162, 85310, 85323, 85401, 85757, 85757, 85763, 85905, 85979, 86020,
                86408, 86685, 86709, 86779, 86834, 86866, 86876, 86887, 86891, 86934, 87002, 87149, 87156, 87367, 87464, 87576,
                87846, 87995, 88307, 88581, 88596, 88750, 88921, 88943, 88947, 88962, 89152, 89248, 89397, 89403, 89638, 89647,
                89873, 89874, 89931, 90121, 90135, 90273, 90471, 90551, 90609, 90731, 90937, 90998, 91023, 91169, 91476, 91517,
                91687, 91700, 91840, 91848, 91930, 92006, 92076, 92250, 92406, 92493, 92726, 92810, 92824, 92841, 93198, 93374,
                93386, 93557, 93576, 93705, 93744, 93896, 94021, 94156, 94176, 94241, 94327, 94538, 94543, 94716, 94908, 94915,
                95217, 95266, 95342, 95415, 95473, 95536, 95591, 95609, 95659, 95881, 95923, 96136, 96204, 96316, 96667, 96856,
                96861, 96868, 96973, 97093, 97370, 97389, 97504, 97619, 97624, 97710, 97820, 97847, 97893, 98171, 98318, 98465,
                98660, 98709, 98955, 99033, 99061, 99259, 99361, 99479, 99579, 99645, 99867, 99905, 99987
        );
        final int target = 15559;
        final int expected = 132;
        final int actual = firstNotSmaller(input, target);
        Assertions.assertEquals(expected, actual, "First element in the array that is larger than or equal to the target");
    }


}
